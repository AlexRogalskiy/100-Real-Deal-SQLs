<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>sql.coding.challenge</groupId>
    <artifactId>SQLServer</artifactId>
    <version>1.0</version>
    <packaging>jar</packaging>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        
        <jooq.version>3.16.6</jooq.version>        
        <flyway.version>7.15.0</flyway.version>
        <codehaus.mojo.version>1.0.0</codehaus.mojo.version>  
        <mssql.jdbc.version>9.2.1.jre8</mssql.jdbc.version>     
        <logback.version>1.2.3</logback.version> 
    </properties>
    <name>SQLServer</name>
    
    <dependencies>
        <dependency>
            <groupId>org.jooq.trial-java-8</groupId>
            <artifactId>jooq</artifactId>         
            <version>${jooq.version}</version>
        </dependency>  
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
            <version>${flyway.version}</version>
        </dependency>        
        <dependency>
            <groupId>com.microsoft.sqlserver</groupId>
            <artifactId>mssql-jdbc</artifactId>
            <version>${mssql.jdbc.version}</version>
        </dependency>          
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.version}</version>
        </dependency> 
    </dependencies>    
    <build>
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>properties-maven-plugin</artifactId>
                <version>${codehaus.mojo.version}</version>
                <executions>
                    <execution>
                        <phase>initialize</phase>
                        <goals>
                            <goal>read-project-properties</goal>
                        </goals>
                        <configuration>
                            <files>                                
                                <file>src/main/resources/application.properties</file>
                            </files>
                        </configuration>
                    </execution>
                </executions>
            </plugin> 
            <plugin>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-maven-plugin</artifactId>                
                <version>${flyway.version}</version>
                <executions>
                    <execution>
                        <id>mssql</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>migrate</goal>
                        </goals>                    
                        <configuration>
                            <url>${mssql.datasource.url}</url>
                            <user>${mssql.datasource.username}</user>
                            <password>${mssql.datasource.password}</password>  
                            <locations>
                                <location>filesystem:./../db/migration/dev/mssql</location>
                            </locations>
                        </configuration>
                    </execution>                    
                </executions>
            </plugin>
            <plugin>
                <groupId>org.jooq.trial-java-8</groupId>
                <artifactId>jooq-codegen-maven</artifactId>            
                <version>${jooq.version}</version>
                <executions>                    
                    <execution>
                        <id>generate-for-sqlserver</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>                                  
                        <configuration xmlns="http://www.jooq.org/xsd/jooq-codegen-3.16.0.xsd">                                                 

                            <!-- Configure the database connection here -->
                            <jdbc>
                                <driver>${mssql.datasource.driverClassName}</driver>
                                <url>${mssql.datasource.url}</url>
                                <user>${mssql.datasource.username}</user>
                                <password>${mssql.datasource.password}</password>                        
                            </jdbc>                                        

                            <generator>
                                <!-- The default code generator. 
                                     You can override this one, to generate your own code style.
                                     
                                Supported generators:                                
                                - org.jooq.codegen.JavaGenerator
                                - org.jooq.codegen.ScalaGenerator
                                - org.jooq.codegen.KotlinGenerator
                                
                                Defaults to org.jooq.codegen.JavaGenerator -->
                                <name>org.jooq.codegen.JavaGenerator</name>
        
                                <database>                            
                                    <!-- The database type. The format here is:
                                    org.jooq.meta.[database].[database]Database -->
                                    <name>org.jooq.meta.sqlserver.SQLServerDatabase</name>
            
                                    <!-- The database schema (or in the absence of schema support, in your RDBMS this
                                    can be the owner, user, database name) to be generated. This cannot be combined with the <schemata/> element.                                     
                                    If <inputSchema/> is missing then all schemas will be considered. -->
                                    <inputCatalog>classicmodels</inputCatalog>
                                    <inputSchema>dbo</inputSchema>
            
                                    <!-- All elements that are generated from your schema
                                    (A Java regular expression. Use the pipe to separate several expressions)
                                    Watch out for case-sensitivity. Depending on your database, this might be important! 
                                    You can create case-insensitive regular expressions using this syntax: (?i:expr).
                                    Whitespace is ignored and comments are possible. -->       
                                    <includes>.*</includes>
                                            
                                    <!-- All elements that are excluded from your schema
                                    (A Java regular expression. Use the pipe to separate several expressions).
                                    Excludes match before includes, i.e. excludes have a higher priority. -->
                                    <excludes>
                                        flyway_schema_history | concatenate | .*_master
                                      | get_.* | refresh_top3_product | sale_price | split_part
                                      | product_of_product_line | top_three_sales_per_employee
                                    </excludes>

                                    <!-- Schema version provider -->            
                                    <schemaVersionProvider>SELECT MAX([version]) FROM [flyway_schema_history]</schemaVersionProvider>
            
                                    <!-- Give enough time to jOOQ to trigger the queries needed for generating sources 
                                    (default is 5 seconds) -->
                                    <logSlowQueriesAfterSeconds>20</logSlowQueriesAfterSeconds>
                                </database>

                                <target>
                                    <!-- The destination package of your generated classes (within the destination directory).
                                    jOOQ may append the schema name to this package if generating multiple schemas,
                                       e.g. org.jooq.your.packagename.schema1
                                       org.jooq.your.packagename.schema2 -->                                    
                                    <packageName>mssql.jooq.generated</packageName>
            
                                    <!-- The destination directory of your generated classes. Using Maven directory layout here -->
                                    <directory>target/generated-sources/jooq/mssql</directory>
                                </target>
                            </generator>    
                                                                                              
                            <!-- A boolean property (or constant) can be specified here to tell the plugin not to do anything -->
                            <skip>false</skip>

                            <!--Additional Maven-specific flags -->
                            <!-- ============================== -->
                            <!-- Instead of providing an inline configuration here, you can specify an external XML configuration file here -->
                            <!-- <configurationFile>${externalfile}</configurationFile> -->
    
                            <!-- Alternatively, you can provide several external configuration files. These will be merged by using
                            Maven's combine.children="append" policy. -->
                            <!--
                            <configurationFiles>
                                <configurationFile>${file1}</configurationFile>
                                <configurationFile>${file2}</configurationFile>
                                <configurationFile>...</configurationFile>
                            </configurationFiles>                                        
                            -->
                        </configuration>
                    </execution>                    
                </executions>
            </plugin>
        </plugins>
    </build>
</project>